{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/michaeldreesen/Documents/Programming/projects/management/node_modules/@expo/vector-icons/build/createIconSet.js\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Font from \"expo-font\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n  var font = _defineProperty({}, fontName, expoAssetId);\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n    var _super = _createSuper(Icon);\n    function Icon() {\n      var _this;\n      _classCallCheck(this, Icon);\n      _this = _super.apply(this, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._mounted = true;\n                if (this.state.fontIsLoaded) {\n                  _context.next = 5;\n                  break;\n                }\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(Font.loadAsync(font));\n              case 4:\n                this._mounted && this.setState({\n                  fontIsLoaded: true\n                });\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        if (!this.state.fontIsLoaded) {\n          return React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 28\n            }\n          });\n        }\n        return React.createElement(RNVIconComponent, _extends({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }\n        }));\n      }\n    }]);\n    return Icon;\n  }(React.Component), _a.propTypes = RNVIconComponent.propTypes, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAOC,aAAa;AACpB,OAAOC,yBAAyB;AAEhC,SACEC,kBAAkB,EAClBC,iBAAiB;AAGnB,eAAc,UAAUC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAe;;EACtE,IAAMC,IAAI,uBAAMH,QAAQ,EAAGC,WAAW,CAAE;EACxC,IAAMG,gBAAgB,GAAGT,aAAa,CAACI,QAAQ,EAAEC,QAAQ,EAAE,IAAI,EAAEE,SAAS,CAAC;EAE3E;IAAA;IAAA;IAAO;MAAA;MAAA;;MAUL,cAAQ,GAAG,KAAK;MAGhB,WAAK,GAAG;QACNG,YAAY,EAAEX,IAAI,CAACY,QAAQ,CAACN,QAAQ;OACrC;MAAC;IAkCJ;IAAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBA/BG,IAAI,CAACO,QAAQ,GAAG,IAAI;gBAAC,IAChB,IAAI,CAACC,KAAK,CAACH,YAAY;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,iCACpBX,IAAI,CAACe,SAAS,CAACN,IAAI,CAAC;cAAA;gBAC1B,IAAI,CAACI,QAAQ,IAAI,IAAI,CAACG,QAAQ,CAAC;kBAAEL,YAAY,EAAE;gBAAI,CAAE,CAAC;cAAC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAAA;MAAA;MAAA,uCAIvC;QAClB,IAAI,CAACE,QAAQ,GAAG,KAAK;MACvB;IAAC;MAAA;MAAA,+BAEcI,KAAK;QAClB,IAAI,IAAI,CAACC,KAAK,EAAE;UACd,IAAI,CAACA,KAAK,CAACC,cAAc,CAACF,KAAK,CAAC;;MAEpC;IAAC;MAAA;MAAA,yBAEK;QAAA;QACJ,IAAI,CAAC,IAAI,CAACH,KAAK,CAACH,YAAY,EAAE;UAC5B,OAAO,oBAAC,IAAI;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,EAAG;;QAGjB,OACE,oBAAC,gBAAgB;UACf,GAAG,EAAE,iBAAI,EAAG;YACV,MAAI,CAACO,KAAK,GAAGE,IAAI;UACnB;QAAE,GACE,IAAI,CAACH,KAAK;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACd;MAEN;IAAC;IAAA;EAAA,EAhDuBlB,KAAK,CAACsB,SAAS,CAiDxC,EAhDQC,YAAS,GAAGZ,gBAAgB,CAACa,SAAU,EACvCD,eAAY,GAAGZ,gBAAgB,CAACc,YAAa,EAC7CF,SAAM,GAAGpB,yBAAyB,CAACoB,EAAI,CAAE,EACzCA,WAAQ,GAAGjB,QAAS,EACpBiB,iBAAc,GAAG;IAAA,OAAMjB,QAAS;EAAA,GAChCiB,gBAAa,GAAG;IAAA,OAAMhB,QAAS;EAAA,GAC/BgB,WAAQ,GAAG;IAAA,OAAMtB,IAAI,CAACe,SAAS,CAACN,IAAI,CAAE;EAAA,GACtCa,OAAI,GAAGb,IAAK;AA0CvB","names":["React","Font","createIconSet","createIconButtonComponent","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","font","RNVIconComponent","fontIsLoaded","isLoaded","_mounted","state","loadAsync","setState","props","_icon","setNativeProps","view","Component","_a","propTypes","defaultProps"],"sourceRoot":"","sources":["../src/createIconSet.tsx"],"sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport * as Font from \"expo-font\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport default function(glyphMap, fontName, expoAssetId, fontStyle?: any) {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName)\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}